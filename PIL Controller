// Include necessary libraries
#include "mbed.h"
#include "MotCon.h"
#include "BNO055.h"

// Declare objects (if necessary)
Ticker Controller; // declare Ticker object named "Controller"
//static BufferedSerial pc(USBTX, USBRX); // tx, rx for serial USB interface to pc
Timer t; // create timer instance
MotCon pitch_motor(A1, A2, A0);   //uses p26 for pwm and p29 and 30 for direction (complimentary)
MotCon yaw_motor(A5, A3, A4);   //uses p26 for pwm and p29 and 30 for direction (complimentary)
BNO055 imu(D0,D1);


// variables for data handling and storage
float TotalTime;        // Total run time
float Time;             // Current elapsed time
float Ts = 0.002;       // Control update period (seconds) (500 Hz equivalent)
float Tstrm = 0.004;    // Approximate data streaming period (seconds) (200 Hz equivalent)
float yaw;              // variable for yaw position
float pitch;            // variable for pitch position
float speed_yaw;        
float speed_pitch;      
float converted_yaw;    
float Vol;              // user-specified step input magnitude (scaled between [-1,1])
float inptVltge;        // signal sent to the motor
float v0;               // Deadzone voltage
float Kp;               // Proportional control gain
float err;              // Error (speed for p-control)
float des_speed;        // Des Speed
float pi = 3.14159265359;       
float des_pos = pi/2;          // Desired position for PI Lead controller
float des_pos_ss;       // steady state for PI Lead controller
float K1 = 2.2936;               //PI Lead Gain 1
float K2 = 4.5695;               //PI Lead Gain 2
float K3 = 2.276;               //PI Lead Gain 3
float K4 = 1;               //PI Lead Gain 4
float K5 = 1.9958;               //PI Lead Gain 5
float K6 = 0.9958;               //PI Lead Gain 6
float err_prev_1;       //Aged error for PI Controller
float err_prev_2;
float inptVltge_prev;   //Aged input voltage for PI Controller
float inptVltge_prev_2;


float wrapToPi(float yaw)
{
    while(yaw > pi)
    yaw = (yaw - 2*pi);

    while(yaw < -pi)
    yaw = (yaw + 2*pi);

    return yaw;
    }


// Additional function definitions
void CL_PILead_PosCtrl() // function to attach to ticker for closed loop PI Lead position control
{
    // read current elapsed time
    Time = t.read();

    // read speed from tach object (units rad/s)
    speed_pitch = -speed_pitch;
    speed_yaw = -speed_yaw;
    // not yet useful for p-control, will keep tho
    converted_yaw = wrapToPi(yaw);
    des_pos = des_pos_ss;
    // compute voltage for motor
    
    // motor control
    err = des_pos - yaw;
    inptVltge = K5*inptVltge_prev - K6*inptVltge_prev_2 + K1*err - K2*err_prev_1 + K3*err_prev_2; // PI Lead Control
    // Enforce saturation so that -1 <= inptVltge <= 1
    if(inptVltge>1.0) {
        inptVltge = 1.0;
    } else if(inptVltge<-1.0) {
        inptVltge = -1.0;
    }
    yaw_motor.mot_control(inptVltge + v0); // pi lead
    inptVltge_prev_2 = inptVltge_prev;
    inptVltge_prev = inptVltge;
    err_prev_2 = err_prev_1;
    err_prev_1 = err;
    // log data to arrays for later printing to serial port
    printf("%.2f,%.2f,%.2f,%.2f",&converted_yaw,&speed_yaw,&inptVltge,&err);
} // end CL_PILead_PosCtrl()
// Function definition Prototypes (declarations)
//void CL_PILead_PosCtrl(); // ticker function for closed loop PI Lead position control (Final Project)

// Enter main function
int main ()
{
    imu.reset();
    imu.setmode(OPERATION_MODE_IMUPLUS); //Set Mode to IMU with relative Heading
    imu.set_angle_units(RADIANS); // Set Angle Units to radians
    imu.set_anglerate_units(RAD_PER_SEC); //Set Gyro units to rad/s
    //pc.baud(115200); // increase baud rate to speed up print messages
    while(1) { // repeat indefinitely

        // perform necessary functions to time the experiment
        t.stop();   // stop timer object in preparation for next trial
        Time = 0.0; // reset time variable
        t.reset();  // reset timer object


        // Only allow experiment to run for 1 second max (to avoid overflow of log variables)
        if(TotalTime>10.0) {
            TotalTime=10.0;
        }
	
        t.start(); // start measuring elapsed time
        imu.get_angles();
        imu.get_gyro();
        speed_yaw = imu.gyro.y;
        speed_pitch = imu.gyro.z;
        yaw = imu.euler.yaw;
        pitch = imu.euler.pitch;

        //err = 0.0;
        //err_prev_1 = 0.0;
        //err_prev_2 = 0.0;
        //inptVltge = 0.0;
        //inptVltge_prev = 0.0;
        //inptVltge_prev_2 = 0.0;
        
        // Attach the stepInput function to ticker object specified with period Ts
        Controller.attach(&CL_PILead_PosCtrl,Ts); //(Final Project) close-loop PI Lead position control
        thread_sleep_for(TotalTime); // wait in main program for experiment to finish

        Controller.detach(); // detach ticker to turn off controller

        // Turn motor off at end of experiment
        pitch_motor.mot_control(0.0);
   	    yaw_motor.mot_control(0.0);

        // stream data from experiment across serial port
        //Time0 = etime[0];
    }// end while(1)
}// end main
