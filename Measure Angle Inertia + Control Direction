#include "bno055/BNO055.h"
#include "mbed.h"
#include "MotCon.h"

// Blinking rate in milliseconds
#define BLINKING_RATE     50ms

// Create BNO055 object with I2C (SDA,SCL) pins
BNO055 imu(D0,D1);

//declare the necessary motor objects and their pin #’s
MotCon pitch(A1, A0, A2);   //uses p26 for pwm and p29 and 30 for direction (complimentary)
MotCon yaw(A5, A3, A4);   //uses p26 for pwm and p29 and 30 for direction (complimentary)
int ang; 
//define a character variable to read from the keyboard
char ch;
//define a float variable for the duty cycle
float yaw_DC = 0.5;
float pitch_DC = 0.5;


function wrapToPi(ang)

while(ang > pi)
ang = ang – 2*pi

while(ang < -pi)
ang = ang + 2*pi

return ang


int main()
{
    // Initialise the digital pin LED1 as an output
    DigitalOut led(LED1);
    imu.setmode(OPERATION_MODE_IMUPLUS); //Set Mode to IMU with relative Heading
    imu.set_angle_units(RADIANS); // Set Angle Units to radians
    imu.set_anglerate_units(RAD_PER_SEC); //Set Gyro units to rad/s
    



    while (true) {

        //move motor
            printf("Press a key: \n");
            scanf("%c", &ch); //scan the character entered from the keyboard and assign it to your character variable
           if (ch =='a') 
            {
                yaw.mot_control(-yaw_DC);  //CCW yaw
            }
            if (ch == 'd')
            {
                yaw.mot_control(yaw_DC);  //Clockwise yaw
            }
            if (ch =='w')
            {
                pitch.mot_control(-pitch_DC); //Up pitch
            }
            if (ch =='s')
            {
                pitch.mot_control(pitch_DC); // Down pitch
            }
            if (ch =='q') 
            {
                yaw.mot_control(0.0);   
                pitch.mot_control(0.0);
            }


    // get information
        led = !led;
        imu.get_angles();
        imu.get_gyro();
        printf("%f,%f,%f,%f\n\r",imu.euler.pitch,imu.euler.yaw,imu.gyro.y,imu.gyro.z);
        ThisThread::sleep_for(BLINKING_RATE);
    }
}
